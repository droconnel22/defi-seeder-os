/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LinkReceiverInterface extends Interface {
  functions: {
    callbackWithoutWithdrawl: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    callbackWithWithdrawl: TypedFunctionDescription<{
      encode([_value, _from, _token]: [BigNumberish, string, string]): string;
    }>;

    tokensReceived: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([_from, _amount, _data]: [string, BigNumberish, Arrayish]): string;
    }>;

    fallbackCalled: TypedFunctionDescription<{ encode([]: []): string }>;

    callDataCalled: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class LinkReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LinkReceiver;
  attach(addressOrName: string): LinkReceiver;
  deployed(): Promise<LinkReceiver>;

  on(event: EventFilter | string, listener: Listener): LinkReceiver;
  once(event: EventFilter | string, listener: Listener): LinkReceiver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LinkReceiver;
  removeAllListeners(eventName: EventFilter | string): LinkReceiver;
  removeListener(eventName: any, listener: Listener): LinkReceiver;

  interface: LinkReceiverInterface;

  functions: {
    callbackWithoutWithdrawl(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    callbackWithWithdrawl(
      _value: BigNumberish,
      _from: string,
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokensReceived(): Promise<BigNumber>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fallbackCalled(): Promise<boolean>;

    callDataCalled(): Promise<boolean>;
  };

  callbackWithoutWithdrawl(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  callbackWithWithdrawl(
    _value: BigNumberish,
    _from: string,
    _token: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokensReceived(): Promise<BigNumber>;

  onTokenTransfer(
    _from: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fallbackCalled(): Promise<boolean>;

  callDataCalled(): Promise<boolean>;

  filters: {};

  estimate: {
    callbackWithoutWithdrawl(): Promise<BigNumber>;

    callbackWithWithdrawl(
      _value: BigNumberish,
      _from: string,
      _token: string
    ): Promise<BigNumber>;

    tokensReceived(): Promise<BigNumber>;

    onTokenTransfer(
      _from: string,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    fallbackCalled(): Promise<BigNumber>;

    callDataCalled(): Promise<BigNumber>;
  };
}
